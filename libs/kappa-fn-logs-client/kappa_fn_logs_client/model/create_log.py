# coding: utf-8

"""
    kappa-fn-logs

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kappa_fn_logs_client import schemas  # noqa: F401


class CreateLog(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "exec_id",
            "stdout",
            "fn",
            "stderr",
        }
        
        class properties:
            fn = schemas.IntSchema
            exec_id = schemas.StrSchema
            stdout = schemas.StrSchema
            stderr = schemas.StrSchema
            __annotations__ = {
                "fn": fn,
                "exec_id": exec_id,
                "stdout": stdout,
                "stderr": stderr,
            }
    
    exec_id: MetaOapg.properties.exec_id
    stdout: MetaOapg.properties.stdout
    fn: MetaOapg.properties.fn
    stderr: MetaOapg.properties.stderr
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fn"]) -> MetaOapg.properties.fn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exec_id"]) -> MetaOapg.properties.exec_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stdout"]) -> MetaOapg.properties.stdout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stderr"]) -> MetaOapg.properties.stderr: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fn", "exec_id", "stdout", "stderr", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fn"]) -> MetaOapg.properties.fn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exec_id"]) -> MetaOapg.properties.exec_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stdout"]) -> MetaOapg.properties.stdout: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stderr"]) -> MetaOapg.properties.stderr: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fn", "exec_id", "stdout", "stderr", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        exec_id: typing.Union[MetaOapg.properties.exec_id, str, ],
        stdout: typing.Union[MetaOapg.properties.stdout, str, ],
        fn: typing.Union[MetaOapg.properties.fn, decimal.Decimal, int, ],
        stderr: typing.Union[MetaOapg.properties.stderr, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateLog':
        return super().__new__(
            cls,
            *_args,
            exec_id=exec_id,
            stdout=stdout,
            fn=fn,
            stderr=stderr,
            _configuration=_configuration,
            **kwargs,
        )
