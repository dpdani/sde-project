# coding: utf-8

"""
    kappa-runner

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kappa_runner_client import schemas  # noqa: F401


class Execution(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "exec_id",
            "fn_id",
            "status",
        }
        
        class properties:
            fn_id = schemas.IntSchema
            exec_id = schemas.StrSchema
            status = schemas.StrSchema
            output = schemas.DictSchema
            __annotations__ = {
                "fn_id": fn_id,
                "exec_id": exec_id,
                "status": status,
                "output": output,
            }
    
    exec_id: MetaOapg.properties.exec_id
    fn_id: MetaOapg.properties.fn_id
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fn_id"]) -> MetaOapg.properties.fn_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exec_id"]) -> MetaOapg.properties.exec_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["output"]) -> MetaOapg.properties.output: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fn_id", "exec_id", "status", "output", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fn_id"]) -> MetaOapg.properties.fn_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exec_id"]) -> MetaOapg.properties.exec_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["output"]) -> typing.Union[MetaOapg.properties.output, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fn_id", "exec_id", "status", "output", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        exec_id: typing.Union[MetaOapg.properties.exec_id, str, ],
        fn_id: typing.Union[MetaOapg.properties.fn_id, decimal.Decimal, int, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        output: typing.Union[MetaOapg.properties.output, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Execution':
        return super().__new__(
            cls,
            *_args,
            exec_id=exec_id,
            fn_id=fn_id,
            status=status,
            output=output,
            _configuration=_configuration,
            **kwargs,
        )
