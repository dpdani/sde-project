# coding: utf-8

"""
    kappa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kappa_client import schemas  # noqa: F401


class CreatedFunction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "related",
            "created",
            "fn_name",
        }
        
        class properties:
            fn_name = schemas.StrSchema
            created = schemas.BoolSchema
        
            @staticmethod
            def related() -> typing.Type['GitHubResponse']:
                return GitHubResponse
            __annotations__ = {
                "fn_name": fn_name,
                "created": created,
                "related": related,
            }
    
    related: 'GitHubResponse'
    created: MetaOapg.properties.created
    fn_name: MetaOapg.properties.fn_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fn_name"]) -> MetaOapg.properties.fn_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["related"]) -> 'GitHubResponse': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["fn_name", "created", "related", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fn_name"]) -> MetaOapg.properties.fn_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["related"]) -> 'GitHubResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["fn_name", "created", "related", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        related: 'GitHubResponse',
        created: typing.Union[MetaOapg.properties.created, bool, ],
        fn_name: typing.Union[MetaOapg.properties.fn_name, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreatedFunction':
        return super().__new__(
            cls,
            *_args,
            related=related,
            created=created,
            fn_name=fn_name,
            _configuration=_configuration,
            **kwargs,
        )

from kappa_client.model.git_hub_response import GitHubResponse
