# coding: utf-8

"""
    kappa-data

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kappa_client import schemas  # noqa: F401


class Function(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "owner",
            "name",
            "code_id",
        }
        
        class properties:
            name = schemas.StrSchema
            owner = schemas.IntSchema
            code_id = schemas.StrSchema
            fn_id = schemas.IntSchema
            __annotations__ = {
                "name": name,
                "owner": owner,
                "code_id": code_id,
                "fn_id": fn_id,
            }
    
    owner: MetaOapg.properties.owner
    name: MetaOapg.properties.name
    code_id: MetaOapg.properties.code_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code_id"]) -> MetaOapg.properties.code_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fn_id"]) -> MetaOapg.properties.fn_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "owner", "code_id", "fn_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code_id"]) -> MetaOapg.properties.code_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fn_id"]) -> typing.Union[MetaOapg.properties.fn_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "owner", "code_id", "fn_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        owner: typing.Union[MetaOapg.properties.owner, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        code_id: typing.Union[MetaOapg.properties.code_id, str, ],
        fn_id: typing.Union[MetaOapg.properties.fn_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Function':
        return super().__new__(
            cls,
            *_args,
            owner=owner,
            name=name,
            code_id=code_id,
            fn_id=fn_id,
            _configuration=_configuration,
            **kwargs,
        )
